{"version":3,"sources":["print.js"],"names":[],"mappings":"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","file":"print-compiled.js","sourcesContent":["var telnet = require('telnet-client');\r\nvar PRINTERS = require('./printers');\r\n\r\nvar printer = PRINTERS.ZEBRA_GX430T;\r\n\r\n// TODO: consider\r\n\r\nfunction invalidParameterError(name, arg) {\r\n    console.log(\"Invalid value for for parameter '\" + name + \"'\");\r\n}\r\n\r\n// TODO: accept units (currently defaulting to inches)\r\nfunction dots(l) {\r\n    return Math.round(l * printer.resolutionDPI);\r\n}\r\n\r\nfunction qrCodeCommand({text = null, errorCorrectionLevel = null, model = null, magnificationFactor = null, d = null, e =  null, inputMode = 'A'}) {\r\n    if (text === null) return;\r\n\r\n    // TODO Warn for invalid option values\r\n    /* field position? */\r\n\r\n    //if (!(model === 1 || model === 2))\r\n    //    invalidParameterError('model', model);\r\n    //\r\n    //if (!(magnificationFactor >= 1 && magnificationFactor <= 10))\r\n    //    invalidParameterError('magnificationFactor', magnificationFactor);\r\n    //\r\n    //if (!(d === 'H' || d === 'Q' || d === 'M' || d === 'L'))\r\n    //    invalidParameterError('d', d);\r\n    //\r\n    //if (!(e >= 1, e <= 7))\r\n    //    invalidParameterError('e', e);\r\n\r\n    return label.qr_code == null ? \"\" :\r\n        '^BQ' +\r\n        '^FD'+inputMode+','+text+'^FS';\r\n}\r\n\r\nfunction buildCommand(label) {\r\n    return '^XA'+\r\n        '^FO50,50^ADN,36,20^FDErik Anderson^FS'+\r\n        qrCodeCommand({text: label.qr_code})+\r\n        '^XZ';\r\n//'^PW'+dots(1.5)+\r\n//    '^LH'+dots(0.1)+','+dots(0.1)+\r\n//    \"\"\r\n}\r\n\r\nvar printParams = {\r\n    printer: {\r\n        address: '192.168.1.122',\r\n        port: printer.default_port,\r\n        dpi: printer.resolutionDPI\r\n    },\r\n    label: {\r\n        width: 1.5 * 25.4,\r\n        length: 1 * 25.4,\r\n        text: '',\r\n        qr_code: 'www.tc.umn.edu/~ande7564'\r\n    }\r\n};\r\n\r\nconsole.log(\"Connecting to printer at \" + printParams.printer.address + ':' + printParams.printer.port + \"\\n\");\r\n\r\nvar telnetParams = {\r\n    host: printParams.printer.address,\r\n    port: printParams.printer.port,\r\n    shellPrompt: '/ # ',\r\n    timeout: 1500\r\n    // removeEcho: 4\r\n};\r\n\r\nvar cmd = buildCommand(printParams.label);\r\n\r\nconsole.log(\"Command: \"+cmd);\r\n\r\nvar connection = new telnet();\r\n\r\nconnection.on('ready', function(prompt) {\r\n    connection.exec(cmd, function(response) {\r\n        console.log(response);\r\n    });\r\n});\r\n\r\nconnection.on('timeout', function() {\r\n    console.log('socket timeout!');\r\n    connection.end();\r\n});\r\n\r\nconnection.on('close', function() {\r\n    console.log('connection closed');\r\n});\r\n\r\nconnection.connect(telnetParams);\r\n\r\n"]}